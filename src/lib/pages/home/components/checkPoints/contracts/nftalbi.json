{
    "hints": {
        "payment()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "fungibleAssetCreate()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "nonFungibleAssetCreate()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "nonFungibleAssetCreateAndSend()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "assetOptIn(asset)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "assetTransfer(asset,account,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "assetFreeze(account,asset)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "assetRevoke(asset,account,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "assetConfig(asset)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "assetDelete(asset)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "multiInnerTxns(application)(uint64,string)": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "deployApp()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc4DeployApp()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "noopAppCall(application)string": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "InnerTransactions",
        "desc": "InnerTransactions contract demonstrates various inner transaction patterns\nin Algorand smart contracts.",
        "methods": [
            {
                "name": "payment",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64",
                    "desc": "The amount of the payment"
                },
                "desc": "Demonstrates a simple payment inner transaction.\nThe fee is set to 0 by default. Manually set here for demonstration purposes.\nThe `Sender` for the payment is implied to be Global.currentApplicationAddress.\nIf a different sender is needed, it'd have to be an account that has been\nrekeyed to the application address."
            },
            {
                "name": "fungibleAssetCreate",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64",
                    "desc": "The ID of the created asset"
                },
                "desc": "Creates a fungible asset (token)"
            },
            {
                "name": "nonFungibleAssetCreate",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64",
                    "desc": "The ID of the created asset"
                },
                "desc": "Creates a non-fungible asset (NFT).\nFollowing the ARC3 standard, the total supply must be 1 for a non-fungible asset.\nIf you want to create fractional NFTs, `total` * `decimals` point must be 1.\nex) total=100, decimals=2, 100 * 0.01 = 1\nThe fee is set to 0 by default for inner transactions.\nThe Sender is implied to be Global.currentApplicationAddress."
            },
            {
                "name": "nonFungibleAssetCreateAndSend",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "assetOptIn",
                "args": [
                    {
                        "type": "asset",
                        "name": "asset",
                        "desc": "The asset to opt into"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Opts the application into an asset.\nA zero amount asset transfer to one's self is a special type of asset transfer\nthat is used to opt-in to an asset.\nTo send an asset transfer, the asset must be an available resource."
            },
            {
                "name": "assetTransfer",
                "args": [
                    {
                        "type": "asset",
                        "name": "asset",
                        "desc": "The asset to transfer"
                    },
                    {
                        "type": "account",
                        "name": "receiver",
                        "desc": "The account to receive the asset"
                    },
                    {
                        "type": "uint64",
                        "name": "amount",
                        "desc": "The amount to transfer"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Transfers an asset from the application to another account.\nFor a smart contract to transfer an asset, the app account must be opted into the asset\nand be holding non zero amount of assets.\nTo send an asset transfer, the asset must be an available resource."
            },
            {
                "name": "assetFreeze",
                "args": [
                    {
                        "type": "account",
                        "name": "acctToBeFrozen",
                        "desc": "The account to freeze the asset for"
                    },
                    {
                        "type": "asset",
                        "name": "asset",
                        "desc": "The asset to freeze"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Freezes an asset for a specific account.\nTo freeze an asset, the asset must be a freezable asset\nby having an account with freeze authority."
            },
            {
                "name": "assetRevoke",
                "args": [
                    {
                        "type": "asset",
                        "name": "asset",
                        "desc": "The asset to revoke"
                    },
                    {
                        "type": "account",
                        "name": "accountToBeRevoked",
                        "desc": "The account to revoke the asset from"
                    },
                    {
                        "type": "uint64",
                        "name": "amount",
                        "desc": "The amount to revoke"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Revokes (clawbacks) an asset from an account.\nTo revoke an asset, the asset must be a revocable asset\nby having an account with clawback authority.\nThe Sender is implied to be current_application_address."
            },
            {
                "name": "assetConfig",
                "args": [
                    {
                        "type": "asset",
                        "name": "asset",
                        "desc": "The asset to reconfigure"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Reconfigures an existing asset.\nFor a smart contract to transfer an asset, the app account must be opted into the asset\nand be holding non zero amount of assets.\nTo send an asset transfer, the asset must be an available resource.\nRefer the Resource Availability section for more information."
            },
            {
                "name": "assetDelete",
                "args": [
                    {
                        "type": "asset",
                        "name": "asset",
                        "desc": "The asset to delete"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Deletes an asset.\nTo delete an asset, the asset must be a deleteable asset\nby having an account with delete authority.\nThe Sender is implied to be current_application_address."
            },
            {
                "name": "multiInnerTxns",
                "args": [
                    {
                        "type": "application",
                        "name": "appId",
                        "desc": "The application to call"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint64,string)",
                    "desc": "A tuple containing the payment amount and the result of the hello world call"
                },
                "desc": "Demonstrates grouped inner transactions"
            },
            {
                "name": "deployApp",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64",
                    "desc": "The ID of the deployed application"
                },
                "desc": "Deploys a HelloWorld contract using direct application call\n\nThis method uses the itxn.applicationCall to deploy the HelloWorld contract."
            },
            {
                "name": "arc4DeployApp",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64",
                    "desc": "The ID of the deployed application"
                },
                "desc": "Deploys a HelloWorld contract using arc4\n\nThis method uses arc4 to deploy the HelloWorld contract."
            },
            {
                "name": "noopAppCall",
                "args": [
                    {
                        "type": "application",
                        "name": "appId",
                        "desc": "The application to call"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "string",
                    "desc": "A string result from the hello world call"
                },
                "desc": "Demonstrates calling methods on another application"
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}